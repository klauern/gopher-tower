# https://taskfile.dev

version: "3"

vars:
  GO_MODULE: github.com/klauern/gopher-tower
  GO_FILES: '$(find . -type f -name "*.go" -not -path "./frontend/*")'

tasks:
  default:
    deps: [help]

  help:
    desc: Display available tasks
    cmds:
      - task --list
    silent: true

  # Frontend Tasks
  frontend:install:
    desc: Install frontend dependencies
    dir: frontend
    cmds:
      - bun install
    sources:
      - frontend/package.json
      - frontend/bun.lockb
    generates:
      - frontend/node_modules/**/*

  frontend:dev:
    desc: Start frontend development server
    dir: frontend
    cmds:
      - bun dev
    deps: [frontend:install]

  frontend:build:
    desc: Build frontend for production
    dir: frontend
    cmds:
      - bun run build
    deps: [frontend:install]

  frontend:test:
    desc: Run frontend tests
    dir: frontend
    cmds:
      - bun test
    deps: [frontend:install]

  frontend:lint:
    desc: Lint frontend code
    dir: frontend
    cmds:
      - bun run lint
    deps: [frontend:install]

  frontend:fmt:
    desc: Format frontend code
    dir: frontend
    cmds:
      - bunx next lint --fix
    deps: [frontend:install]

  # Go Tasks
  go:deps:
    desc: Download Go dependencies
    cmds:
      - go mod download
      - go mod tidy
    sources:
      - go.mod
      - go.sum

  go:fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...
    deps: [go:deps]

  go:prepare-embed:
    desc: Prepare frontend files for embedding
    deps: [frontend:build]
    cmds:
      - rm -rf cmd/frontend-out
      - mkdir -p cmd/frontend-out
      - cp -R frontend/out/* cmd/frontend-out/
      - find cmd/frontend-out -type f -name "*.js" -exec chmod 644 {} \;
      - find cmd/frontend-out -type f -name "*.css" -exec chmod 644 {} \;

  go:build:
    desc: Build Go application
    cmds:
      - go build -o gopher-tower ./cmd
    deps: [go:deps, go:prepare-embed]
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - gopher-tower

  go:test:
    desc: Run Go tests
    cmds:
      - go test -v ./...
    deps: [go:deps]

  go:run:
    desc: Run Go application
    cmds:
      - go run ./cmd/main.go
    deps: [go:deps, go:prepare-embed]

  go:lint:
    desc: Lint Go code
    cmds:
      - |
        if ! command -v golangci-lint &> /dev/null; then
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        fi
      - golangci-lint run
    deps: [go:deps]

  # Combined Tasks
  dev:
    desc: Start development environment (frontend + backend)
    deps: [go:deps, frontend:install]
    cmds:
      - ./scripts/dev.sh

  test:
    desc: Run all tests
    cmds:
      - task: go:test
      - task: frontend:test

  lint:
    desc: Lint all code
    cmds:
      - task: go:lint
      - task: frontend:lint

  fmt:
    desc: Format all code
    cmds:
      - task: go:fmt
      - task: frontend:fmt

  build:
    desc: Build everything
    deps: [go:build]
    cmds:
      - echo "Build completed successfully"

  embedded:
    desc: Build embedded app (frontend bundled in Go binary)
    deps: [go:prepare-embed]
    cmds:
      - go build -o gopher-tower-embedded ./cmd

  run:embedded:
    desc: Run embedded application
    deps: [embedded]
    cmds:
      - ./gopher-tower-embedded

  # Docker Tasks
  docker:build:
    desc: Build all Docker images
    cmds:
      - docker-compose build

  docker:up:
    desc: Start all Docker containers
    cmds:
      - docker-compose up -d

  docker:down:
    desc: Stop all Docker containers
    cmds:
      - docker-compose down

  docker:logs:
    desc: Show logs from all containers
    cmds:
      - docker-compose logs -f

  docker:rebuild:
    desc: Rebuild and restart all containers
    cmds:
      - docker-compose down
      - docker-compose build
      - docker-compose up -d

  docker:clean:
    desc: Clean up Docker resources (containers, images)
    cmds:
      - docker-compose down --rmi local
      - docker system prune -f
