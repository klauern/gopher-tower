// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/klauern/gopher-tower/internal/api/jobs (interfaces: JobQuerier)
//
// Generated by this command:
//
//	mockgen -destination=mock_querier_test.go -package=jobs github.com/klauern/gopher-tower/internal/api/jobs JobQuerier
//

// Package jobs is a generated GoMock package.
package jobs

import (
	context "context"
	reflect "reflect"

	db "github.com/klauern/gopher-tower/internal/db"
	gomock "go.uber.org/mock/gomock"
)

// MockJobQuerier is a mock of JobQuerier interface.
type MockJobQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockJobQuerierMockRecorder
	isgomock struct{}
}

// MockJobQuerierMockRecorder is the mock recorder for MockJobQuerier.
type MockJobQuerierMockRecorder struct {
	mock *MockJobQuerier
}

// NewMockJobQuerier creates a new mock instance.
func NewMockJobQuerier(ctrl *gomock.Controller) *MockJobQuerier {
	mock := &MockJobQuerier{ctrl: ctrl}
	mock.recorder = &MockJobQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobQuerier) EXPECT() *MockJobQuerierMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockJobQuerier) CreateJob(ctx context.Context, arg db.CreateJobParams) (db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, arg)
	ret0, _ := ret[0].(db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockJobQuerierMockRecorder) CreateJob(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockJobQuerier)(nil).CreateJob), ctx, arg)
}

// DeleteJob mocks base method.
func (m *MockJobQuerier) DeleteJob(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockJobQuerierMockRecorder) DeleteJob(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockJobQuerier)(nil).DeleteJob), ctx, id)
}

// GetJob mocks base method.
func (m *MockJobQuerier) GetJob(ctx context.Context, id string) (db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", ctx, id)
	ret0, _ := ret[0].(db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockJobQuerierMockRecorder) GetJob(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockJobQuerier)(nil).GetJob), ctx, id)
}

// ListJobs mocks base method.
func (m *MockJobQuerier) ListJobs(ctx context.Context, arg db.ListJobsParams) ([]db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", ctx, arg)
	ret0, _ := ret[0].([]db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockJobQuerierMockRecorder) ListJobs(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockJobQuerier)(nil).ListJobs), ctx, arg)
}

// UpdateJob mocks base method.
func (m *MockJobQuerier) UpdateJob(ctx context.Context, arg db.UpdateJobParams) (db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", ctx, arg)
	ret0, _ := ret[0].(db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockJobQuerierMockRecorder) UpdateJob(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockJobQuerier)(nil).UpdateJob), ctx, arg)
}
