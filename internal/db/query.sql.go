// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createActivityLog = `-- name: CreateActivityLog :one
INSERT INTO activity_logs (
  id, action, entity_type, entity_id, details, user_id
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING id, "action", entity_type, entity_id, details, created_at, user_id
`

type CreateActivityLogParams struct {
	ID         string
	Action     string
	EntityType string
	EntityID   string
	Details    sql.NullString
	UserID     string
}

func (q *Queries) CreateActivityLog(ctx context.Context, arg CreateActivityLogParams) (ActivityLog, error) {
	row := q.db.QueryRowContext(ctx, createActivityLog,
		arg.ID,
		arg.Action,
		arg.EntityType,
		arg.EntityID,
		arg.Details,
		arg.UserID,
	)
	var i ActivityLog
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.EntityType,
		&i.EntityID,
		&i.Details,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const createAttachment = `-- name: CreateAttachment :one
INSERT INTO attachments (
  id, filename, file_path, file_size, mime_type, task_id, job_id
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, filename, file_path, file_size, mime_type, created_at, task_id, job_id
`

type CreateAttachmentParams struct {
	ID       string
	Filename string
	FilePath string
	FileSize int64
	MimeType string
	TaskID   sql.NullString
	JobID    sql.NullString
}

func (q *Queries) CreateAttachment(ctx context.Context, arg CreateAttachmentParams) (Attachment, error) {
	row := q.db.QueryRowContext(ctx, createAttachment,
		arg.ID,
		arg.Filename,
		arg.FilePath,
		arg.FileSize,
		arg.MimeType,
		arg.TaskID,
		arg.JobID,
	)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.FilePath,
		&i.FileSize,
		&i.MimeType,
		&i.CreatedAt,
		&i.TaskID,
		&i.JobID,
	)
	return i, err
}

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  id, content, user_id, task_id
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, content, created_at, updated_at, user_id, task_id
`

type CreateCommentParams struct {
	ID      string
	Content string
	UserID  string
	TaskID  string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.ID,
		arg.Content,
		arg.UserID,
		arg.TaskID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.TaskID,
	)
	return i, err
}

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
  id, name, description, status, start_date, end_date, owner_id
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, name, description, status, start_date, end_date, created_at, updated_at, owner_id
`

type CreateJobParams struct {
	ID          string
	Name        string
	Description sql.NullString
	Status      string
	StartDate   sql.NullTime
	EndDate     sql.NullTime
	OwnerID     sql.NullString
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, createJob,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
		arg.OwnerID,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
	)
	return i, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
  id, type, content, user_id, reference_id, reference_type
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING id, type, content, is_read, created_at, user_id, reference_id, reference_type
`

type CreateNotificationParams struct {
	ID            string
	Type          string
	Content       string
	UserID        string
	ReferenceID   sql.NullString
	ReferenceType sql.NullString
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification,
		arg.ID,
		arg.Type,
		arg.Content,
		arg.UserID,
		arg.ReferenceID,
		arg.ReferenceType,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Content,
		&i.IsRead,
		&i.CreatedAt,
		&i.UserID,
		&i.ReferenceID,
		&i.ReferenceType,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  id, title, description, status, priority, due_date, user_id, job_id
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, title, description, status, priority, due_date, created_at, updated_at, user_id, job_id
`

type CreateTaskParams struct {
	ID          string
	Title       string
	Description sql.NullString
	Status      string
	Priority    sql.NullString
	DueDate     sql.NullTime
	UserID      sql.NullString
	JobID       sql.NullString
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.DueDate,
		arg.UserID,
		arg.JobID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.JobID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, username, email, password_hash, full_name, role
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING id, username, email, password_hash, full_name, role, created_at, updated_at, last_login
`

type CreateUserParams struct {
	ID           string
	Username     string
	Email        string
	PasswordHash string
	FullName     sql.NullString
	Role         sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FullName,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const deleteAttachment = `-- name: DeleteAttachment :exec
DELETE FROM attachments
WHERE id = ?
`

func (q *Queries) DeleteAttachment(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAttachment, id)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = ?
`

func (q *Queries) DeleteComment(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs
WHERE id = ?
`

func (q *Queries) DeleteJob(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteJob, id)
	return err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE id = ?
`

func (q *Queries) DeleteNotification(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAttachment = `-- name: GetAttachment :one
SELECT id, filename, file_path, file_size, mime_type, created_at, task_id, job_id FROM attachments
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAttachment(ctx context.Context, id string) (Attachment, error) {
	row := q.db.QueryRowContext(ctx, getAttachment, id)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.FilePath,
		&i.FileSize,
		&i.MimeType,
		&i.CreatedAt,
		&i.TaskID,
		&i.JobID,
	)
	return i, err
}

const getComment = `-- name: GetComment :one
SELECT id, content, created_at, updated_at, user_id, task_id FROM comments
WHERE id = ? LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id string) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.TaskID,
	)
	return i, err
}

const getJob = `-- name: GetJob :one
SELECT id, name, description, status, start_date, end_date, created_at, updated_at, owner_id FROM jobs
WHERE id = ? LIMIT 1
`

func (q *Queries) GetJob(ctx context.Context, id string) (Job, error) {
	row := q.db.QueryRowContext(ctx, getJob, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
	)
	return i, err
}

const getNotification = `-- name: GetNotification :one
SELECT id, type, content, is_read, created_at, user_id, reference_id, reference_type FROM notifications
WHERE id = ? LIMIT 1
`

func (q *Queries) GetNotification(ctx context.Context, id string) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotification, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Content,
		&i.IsRead,
		&i.CreatedAt,
		&i.UserID,
		&i.ReferenceID,
		&i.ReferenceType,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, status, priority, due_date, created_at, updated_at, user_id, job_id FROM tasks
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.JobID,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password_hash, full_name, role, created_at, updated_at, last_login FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, full_name, role, created_at, updated_at, last_login FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, full_name, role, created_at, updated_at, last_login FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const listActivityLogsByEntity = `-- name: ListActivityLogsByEntity :many
SELECT id, "action", entity_type, entity_id, details, created_at, user_id FROM activity_logs
WHERE entity_type = ? AND entity_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListActivityLogsByEntityParams struct {
	EntityType string
	EntityID   string
	Limit      int64
	Offset     int64
}

func (q *Queries) ListActivityLogsByEntity(ctx context.Context, arg ListActivityLogsByEntityParams) ([]ActivityLog, error) {
	rows, err := q.db.QueryContext(ctx, listActivityLogsByEntity,
		arg.EntityType,
		arg.EntityID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActivityLog
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.EntityType,
			&i.EntityID,
			&i.Details,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivityLogsByUser = `-- name: ListActivityLogsByUser :many
SELECT id, "action", entity_type, entity_id, details, created_at, user_id FROM activity_logs
WHERE user_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListActivityLogsByUserParams struct {
	UserID string
	Limit  int64
	Offset int64
}

func (q *Queries) ListActivityLogsByUser(ctx context.Context, arg ListActivityLogsByUserParams) ([]ActivityLog, error) {
	rows, err := q.db.QueryContext(ctx, listActivityLogsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActivityLog
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.EntityType,
			&i.EntityID,
			&i.Details,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAttachmentsByJob = `-- name: ListAttachmentsByJob :many
SELECT id, filename, file_path, file_size, mime_type, created_at, task_id, job_id FROM attachments
WHERE job_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListAttachmentsByJob(ctx context.Context, jobID sql.NullString) ([]Attachment, error) {
	rows, err := q.db.QueryContext(ctx, listAttachmentsByJob, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attachment
	for rows.Next() {
		var i Attachment
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.FilePath,
			&i.FileSize,
			&i.MimeType,
			&i.CreatedAt,
			&i.TaskID,
			&i.JobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAttachmentsByTask = `-- name: ListAttachmentsByTask :many
SELECT id, filename, file_path, file_size, mime_type, created_at, task_id, job_id FROM attachments
WHERE task_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListAttachmentsByTask(ctx context.Context, taskID sql.NullString) ([]Attachment, error) {
	rows, err := q.db.QueryContext(ctx, listAttachmentsByTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attachment
	for rows.Next() {
		var i Attachment
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.FilePath,
			&i.FileSize,
			&i.MimeType,
			&i.CreatedAt,
			&i.TaskID,
			&i.JobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommentsByTask = `-- name: ListCommentsByTask :many
SELECT id, content, created_at, updated_at, user_id, task_id FROM comments
WHERE task_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListCommentsByTaskParams struct {
	TaskID string
	Limit  int64
	Offset int64
}

func (q *Queries) ListCommentsByTask(ctx context.Context, arg ListCommentsByTaskParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByTask, arg.TaskID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.TaskID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobs = `-- name: ListJobs :many
SELECT id, name, description, status, start_date, end_date, created_at, updated_at, owner_id FROM jobs
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListJobsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListJobs(ctx context.Context, arg ListJobsParams) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, listJobs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsByOwner = `-- name: ListJobsByOwner :many
SELECT id, name, description, status, start_date, end_date, created_at, updated_at, owner_id FROM jobs
WHERE owner_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListJobsByOwnerParams struct {
	OwnerID sql.NullString
	Limit   int64
	Offset  int64
}

func (q *Queries) ListJobsByOwner(ctx context.Context, arg ListJobsByOwnerParams) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, listJobsByOwner, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotificationsByUser = `-- name: ListNotificationsByUser :many
SELECT id, type, content, is_read, created_at, user_id, reference_id, reference_type FROM notifications
WHERE user_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListNotificationsByUserParams struct {
	UserID string
	Limit  int64
	Offset int64
}

func (q *Queries) ListNotificationsByUser(ctx context.Context, arg ListNotificationsByUserParams) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, listNotificationsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Content,
			&i.IsRead,
			&i.CreatedAt,
			&i.UserID,
			&i.ReferenceID,
			&i.ReferenceType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, status, priority, due_date, created_at, updated_at, user_id, job_id FROM tasks
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListTasksParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.JobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByJob = `-- name: ListTasksByJob :many
SELECT id, title, description, status, priority, due_date, created_at, updated_at, user_id, job_id FROM tasks
WHERE job_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListTasksByJobParams struct {
	JobID  sql.NullString
	Limit  int64
	Offset int64
}

func (q *Queries) ListTasksByJob(ctx context.Context, arg ListTasksByJobParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksByJob, arg.JobID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.JobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByStatus = `-- name: ListTasksByStatus :many
SELECT id, title, description, status, priority, due_date, created_at, updated_at, user_id, job_id FROM tasks
WHERE status = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListTasksByStatusParams struct {
	Status string
	Limit  int64
	Offset int64
}

func (q *Queries) ListTasksByStatus(ctx context.Context, arg ListTasksByStatusParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.JobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByUser = `-- name: ListTasksByUser :many
SELECT id, title, description, status, priority, due_date, created_at, updated_at, user_id, job_id FROM tasks
WHERE user_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListTasksByUserParams struct {
	UserID sql.NullString
	Limit  int64
	Offset int64
}

func (q *Queries) ListTasksByUser(ctx context.Context, arg ListTasksByUserParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.JobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnreadNotificationsByUser = `-- name: ListUnreadNotificationsByUser :many
SELECT id, type, content, is_read, created_at, user_id, reference_id, reference_type FROM notifications
WHERE user_id = ? AND is_read = 0
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListUnreadNotificationsByUserParams struct {
	UserID string
	Limit  int64
	Offset int64
}

func (q *Queries) ListUnreadNotificationsByUser(ctx context.Context, arg ListUnreadNotificationsByUserParams) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, listUnreadNotificationsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Content,
			&i.IsRead,
			&i.CreatedAt,
			&i.UserID,
			&i.ReferenceID,
			&i.ReferenceType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password_hash, full_name, role, created_at, updated_at, last_login FROM users
ORDER BY username
LIMIT ? OFFSET ?
`

type ListUsersParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.FullName,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAllNotificationsAsRead = `-- name: MarkAllNotificationsAsRead :exec
UPDATE notifications
SET is_read = 1
WHERE user_id = ? AND is_read = 0
`

func (q *Queries) MarkAllNotificationsAsRead(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, markAllNotificationsAsRead, userID)
	return err
}

const markNotificationAsRead = `-- name: MarkNotificationAsRead :one
UPDATE notifications
SET is_read = 1
WHERE id = ?
RETURNING id, type, content, is_read, created_at, user_id, reference_id, reference_type
`

func (q *Queries) MarkNotificationAsRead(ctx context.Context, id string) (Notification, error) {
	row := q.db.QueryRowContext(ctx, markNotificationAsRead, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Content,
		&i.IsRead,
		&i.CreatedAt,
		&i.UserID,
		&i.ReferenceID,
		&i.ReferenceType,
	)
	return i, err
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET
  content = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, content, created_at, updated_at, user_id, task_id
`

type UpdateCommentParams struct {
	Content string
	ID      string
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.Content, arg.ID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.TaskID,
	)
	return i, err
}

const updateJob = `-- name: UpdateJob :one
UPDATE jobs
SET
  name = ?,
  description = ?,
  status = ?,
  start_date = ?,
  end_date = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, description, status, start_date, end_date, created_at, updated_at, owner_id
`

type UpdateJobParams struct {
	Name        string
	Description sql.NullString
	Status      string
	StartDate   sql.NullTime
	EndDate     sql.NullTime
	ID          string
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, updateJob,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET
  title = ?,
  description = ?,
  status = ?,
  priority = ?,
  due_date = ?,
  user_id = ?,
  job_id = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, title, description, status, priority, due_date, created_at, updated_at, user_id, job_id
`

type UpdateTaskParams struct {
	Title       string
	Description sql.NullString
	Status      string
	Priority    sql.NullString
	DueDate     sql.NullTime
	UserID      sql.NullString
	JobID       sql.NullString
	ID          string
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.DueDate,
		arg.UserID,
		arg.JobID,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.JobID,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  username = ?,
  email = ?,
  password_hash = ?,
  full_name = ?,
  role = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, username, email, password_hash, full_name, role, created_at, updated_at, last_login
`

type UpdateUserParams struct {
	Username     string
	Email        string
	PasswordHash string
	FullName     sql.NullString
	Role         sql.NullString
	ID           string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FullName,
		arg.Role,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}
